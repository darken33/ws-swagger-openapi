/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sqli.pbousquet.testapi.api;

import com.sqli.pbousquet.testapi.dto.GoodbyeDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-15T17:49:02.458679+02:00[Europe/Paris]")

@Validated
@Api(value = "Goodbye", description = "the Goodbye API")
@RequestMapping("")
public interface GoodbyeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }
    @ApiOperation(value = "goodbye", nickname = "goodbyeUsingGET", notes = "", response = GoodbyeDto.class, tags={ "goodbye", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GoodbyeDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/v1/goodbye/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GoodbyeDto> goodbyeUsingGET(@ApiParam(value = "name", required = true) @PathVariable("name") String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    @ApiOperation(value = "goodbye", nickname = "goodbyeUsingGET1", notes = "", response = GoodbyeDto.class, tags={ "goodbye", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GoodbyeDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/v1/goodbye",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GoodbyeDto> goodbyeUsingGET1() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
